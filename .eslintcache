[{"C:\\Projects\\elevator\\src\\index.js":"1","C:\\Projects\\elevator\\src\\App.js":"2","C:\\Projects\\elevator\\src\\reportWebVitals.js":"3","C:\\Projects\\elevator\\src\\components\\elevator\\Elevator.js":"4","C:\\Projects\\elevator\\src\\shared-logic\\canvase\\canvas-helpers.js":"5","C:\\Projects\\elevator\\src\\components\\Control.js":"6","C:\\Projects\\elevator\\src\\reducers\\index.js":"7","C:\\Projects\\elevator\\src\\reducers\\elevator-control.js":"8","C:\\Projects\\elevator\\src\\actions\\type.js":"9","C:\\Projects\\elevator\\src\\actions\\index.js":"10","C:\\Projects\\elevator\\src\\shared-logic\\objects\\OrderedLinkedList.js":"11","C:\\Projects\\elevator\\src\\shared-logic\\objects\\Building2.js":"12"},{"size":649,"mtime":1608030966517,"results":"13","hashOfConfig":"14"},{"size":883,"mtime":1609842876715,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1607497382521,"results":"16","hashOfConfig":"14"},{"size":1470,"mtime":1609842876722,"results":"17","hashOfConfig":"14"},{"size":847,"mtime":1607609182643,"results":"18","hashOfConfig":"14"},{"size":1417,"mtime":1609842876719,"results":"19","hashOfConfig":"14"},{"size":148,"mtime":1608721110468,"results":"20","hashOfConfig":"14"},{"size":275,"mtime":1608028207529,"results":"21","hashOfConfig":"14"},{"size":50,"mtime":1608027504387,"results":"22","hashOfConfig":"14"},{"size":226,"mtime":1609842876717,"results":"23","hashOfConfig":"14"},{"size":4300,"mtime":1609842876726,"results":"24","hashOfConfig":"14"},{"size":7887,"mtime":1609842876724,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"9bww6e",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},"C:\\Projects\\elevator\\src\\index.js",[],["55","56"],"C:\\Projects\\elevator\\src\\App.js",[],"C:\\Projects\\elevator\\src\\reportWebVitals.js",[],"C:\\Projects\\elevator\\src\\components\\elevator\\Elevator.js",["57","58","59","60","61"],"import React, {useRef, useEffect, useState} from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport {fixRatio} from '../../shared-logic/canvase/canvas-helpers'\r\n// import {Building} from '../../shared-logic/objects/Building'\r\nimport {Building2} from '../../shared-logic/objects/Building2'\r\n\r\nfunction Elevator({floors, ...props}) {\r\n\r\n    const canvas = useRef()\r\n    const [floorDimensions, setFloorDimensions] = useState({height: 10, width: 30})\r\n    const [elevatorLocation, setElevatorLocation] = useState(0)\r\n    const [building, setBuilding] = useState()\r\n\r\n    useEffect(() => {\r\n        if(!canvas.current) {\r\n            return\r\n        }\r\n        let cnv = canvas.current\r\n        fixRatio(cnv, cnv.getContext(\"2d\"), 1000, 500)\r\n        const building = new Building2(cnv, {x: 150, y:500}, floorDimensions, floors ? floors : 0)\r\n        building.build()\r\n        setBuilding(building)\r\n        // building.animateMove(30)\r\n    }, [canvas])\r\n\r\n    useEffect(() => {\r\n        if(building) {\r\n            building.answerCall(props.elevatorCall)\r\n\r\n        }\r\n    }, [props.elevatorCall])\r\n\r\n    return (\r\n        <div className=\"elevator\">\r\n            <canvas ref={canvas} id=\"elevators\" width=\"1000\" height=\"500\">\r\n                \r\n            </canvas>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        elevatorCall: state.elevatorControl.elevatorDesteny\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Elevator)","C:\\Projects\\elevator\\src\\shared-logic\\canvase\\canvas-helpers.js",[],"C:\\Projects\\elevator\\src\\components\\Control.js",["62","63"],"import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../actions'\r\n\r\nfunction Control(props) {\r\n\r\n    const addDestiny = (e) => {\r\n        const floor = Number(e.currentTarget.getAttribute(\"floor\"))\r\n        if(e.target.getAttribute(\"direction\")) {\r\n            props.setDestination(floor, e.target.getAttribute(\"direction\")===\"up\", true)\r\n        }\r\n\r\n    }\r\n\r\n    const pushListItem = (text, floor) => {\r\n        return (\r\n            <li key={floor} floor={floor} onClick={addDestiny}>\r\n                {text+\"  |  \"} \r\n                <a direction=\"up\">Up | </a> \r\n                <a direction=\"down\"> Down</a>\r\n            </li>\r\n        )\r\n    }\r\n\r\n    const [floors] = useState(() => {\r\n        const tmp = []\r\n        let text\r\n        for(let i=0; i<40; i++) {\r\n            if(i+1 > 3) {\r\n                text = `${i+1}th floor`\r\n            } else if(i+1 === 3) {\r\n                text = `${i+1}rd floor`\r\n            } else if(i+1 === 2) {\r\n                text = `${i+1}nd floor`\r\n            } else if(i+1 === 1) {\r\n                text = `${i+1}st floor`\r\n            }\r\n            tmp.push(pushListItem(text, i+1))\r\n        }\r\n\r\n        return tmp\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {floors.map(floor => floor)}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default connect(null, actions)(Control)","C:\\Projects\\elevator\\src\\reducers\\index.js",[],"C:\\Projects\\elevator\\src\\reducers\\elevator-control.js",["64"],"import {ELEVATOR_DESTENY} from '../actions/type'\r\n\r\nexport default function (state = {}, action) {\r\n    switch(action.type) {\r\n        case ELEVATOR_DESTENY:\r\n            return {...state, elevatorDesteny: action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Projects\\elevator\\src\\actions\\type.js",[],"C:\\Projects\\elevator\\src\\actions\\index.js",[],"C:\\Projects\\elevator\\src\\shared-logic\\objects\\OrderedLinkedList.js",[],"C:\\Projects\\elevator\\src\\shared-logic\\objects\\Building2.js",["65","66"],"import {OrderedLinkedList} from './OrderedLinkedList'\r\n\r\nexport class Building2 {\r\n    context\r\n    position\r\n    floorDimentions\r\n    floors\r\n    elevatorPosition\r\n    elevatorMove\r\n    upList\r\n    downList\r\n    currentList\r\n    animationFrames\r\n\r\n    constructor(canvas, position, floorDimentions, floors) {\r\n        if(!(canvas instanceof HTMLCanvasElement)) {\r\n            throw new Error(\"canvas must be canvas Element\")\r\n        }\r\n        if(!position || !position.x || !position.y) {\r\n            throw new Error(\"position must contain x and y\")\r\n        }\r\n        if(!floorDimentions || !floorDimentions.width || !floorDimentions.height) {\r\n            throw new Error(\"floor dimention must contain width and height\")\r\n        }\r\n        if(!floors || typeof floors!==\"number\") {\r\n            throw new Error(\"floors must be a number\")\r\n        }\r\n\r\n        this.context = canvas.getContext(\"2d\")\r\n        this.position = position\r\n        this.floorDimentions = floorDimentions\r\n        this.floors = floors\r\n        this.elevatorMove = false\r\n        this.upList = new OrderedLinkedList(\"minFirst\")\r\n        this.downList = new OrderedLinkedList(\"maxFirst\")\r\n        this.animationFrames = {movement: undefined, door: undefined}\r\n    }\r\n\r\n    build(elevatorPosition) {\r\n        if(elevatorPosition > this.floors || elevatorPosition < 1) {\r\n            throw new Error(\"elevator must be in the range of floors\")\r\n        }\r\n        for(let i=0; i<this.floors; i++) {\r\n            this.buildFloor(i + 1)\r\n        }\r\n        if(!elevatorPosition) {\r\n            elevatorPosition = 1\r\n        }\r\n        this.elevatorPosition = this.position.y - elevatorPosition*this.floorDimentions.height\r\n        this.buildElveator(this.elevatorPosition)\r\n    }\r\n\r\n    buildFloor(floorNumber) {\r\n        const {x, y} = this.position\r\n        const {width, height} = this.floorDimentions\r\n        this.context.beginPath()\r\n        this.context.rect(x, y - floorNumber*height, width, height)\r\n        this.context.stroke()\r\n    }\r\n\r\n    clearFloor(floorNumber) {\r\n        const {x, y} = this.position\r\n        const {width, height} = this.floorDimentions\r\n        this.context.clearRect(x-1, y-floorNumber*height, width+2, height)\r\n    }\r\n\r\n    buildElveator(location) {\r\n        const {x, y} = this.position\r\n        const {width, height} = this.floorDimentions\r\n        this.context.fillStyle = \"red\"\r\n        this.context.fillRect(x, location, width, height)\r\n    }\r\n\r\n    clearElevator(location) {\r\n        const {x, y} = this.position\r\n        const {width, height} = this.floorDimentions\r\n        this.context.clearRect(x-1, location, width+2, height)\r\n    }\r\n\r\n    answerCall(call) {\r\n\r\n        const floor = (this.position.y-this.elevatorPosition)/this.floorDimentions.height\r\n        \r\n        const pushFloorBetween = (list) => {\r\n            if(!list || !list.getIndexNode()) {\r\n                return\r\n            }\r\n            \r\n            if(list.orderType.rule(call.destination, this.currentList.getIndexNode().value)) {\r\n                if(list.orderType.rule(floor, call.destination)) {\r\n                    cancelAnimationFrame(this.animationFrames.movement)\r\n                    this.elevatorMove = false\r\n                    this.currentList.backIndex()\r\n                    this.manageCall(call)\r\n                }\r\n            }\r\n        }\r\n\r\n        if(call && call.destination === floor) {\r\n            this.animateDoor(call)\r\n            return\r\n        }\r\n\r\n        if(call && call.goingUp) {\r\n            this.upList.appenedNode(call.destination)\r\n            if(this.currentList === this.upList) {\r\n                pushFloorBetween(this.upList)\r\n            }\r\n        } else if(call) {\r\n            this.downList.appenedNode(call.destination)\r\n            if(this.currentList === this.downList) {\r\n                pushFloorBetween(this.downList)\r\n            }\r\n        }\r\n\r\n        if(!this.currentList) {\r\n            this.currentList = this.upList.firstNode ? this.upList : this.downList\r\n        }\r\n\r\n        if(!this.elevatorMove) {\r\n            let nextFloor = this.currentList.getIndexNode()\r\n            if(!nextFloor) {\r\n                this.currentList = this.currentList === this.upList ? this.downList : this.upList \r\n                nextFloor = this.currentList.getIndexNode()\r\n\r\n                if(!nextFloor) {\r\n                    return\r\n                }\r\n            }\r\n            this.manageCall(call || {destination: nextFloor.value, goingUp: this.currentList===this.upList})\r\n\r\n        }\r\n\r\n    } \r\n    \r\n\r\n    manageCall(call) {\r\n        const floor = (this.position.y-this.elevatorPosition)/this.floorDimentions.height\r\n\r\n        if(!this.elevatorMove && floor !==call.destination) {\r\n            this.animateMove(call)\r\n        } else if(this.elevatorMove) {\r\n            this.animateDoor(call)\r\n        } else {\r\n            this.answerCall()\r\n        }\r\n    }\r\n\r\n    animateMove(call) {\r\n        this.elevatorMove = true\r\n        let condition, growth\r\n\r\n        const startLocation = (this.position.y-this.elevatorPosition)/this.floorDimentions.height\r\n        if(startLocation < call.destination) {\r\n            condition = (current, final) => {return current < final}\r\n            growth = -1\r\n        } else {\r\n            condition = (current, final) => {return current > final}\r\n            growth = 1\r\n        }\r\n        const moveElevator = () => {\r\n            this.elevatorPosition+=growth\r\n            const location = (this.position.y-this.elevatorPosition)/this.floorDimentions.height\r\n            this.clearFloor(Math.floor(location))\r\n            this.clearFloor( Math.ceil(location))\r\n            this.clearElevator(location)\r\n            this.buildFloor(Math.floor(location))\r\n            this.buildFloor(Math.ceil(location))\r\n            this.buildElveator(this.elevatorPosition)\r\n\r\n            if(condition(location, call.destination)) {\r\n                this.animationFrames.movement = window.requestAnimationFrame(moveElevator)\r\n            } else {\r\n                this.manageCall(call)\r\n            }\r\n        }\r\n        this.animationFrames.movement = window.requestAnimationFrame(moveElevator)\r\n    }\r\n\r\n    animateDoor(call) {\r\n        let growth = 1\r\n        let open = true\r\n        const {x} = this.position\r\n        const {width, height} = this.floorDimentions\r\n\r\n        const doorAction = () => {\r\n            if(growth <= width) {\r\n                this.context.fillStyle = open ? \"green\" : \"red\"\r\n                if(open) {\r\n                    this.context.fillRect(x ,this.elevatorPosition , growth, height)\r\n                } else {\r\n                    this.context.fillRect(x + width ,this.elevatorPosition , -growth, height)\r\n                }\r\n                growth+=1\r\n                window.requestAnimationFrame(doorAction)\r\n            } else if (open) {\r\n                // console.log(\"point to choose if call.callPoint is true\")\r\n                setTimeout(() => {\r\n                    growth = 1\r\n                    open = false\r\n                    window.requestAnimationFrame(doorAction)\r\n                }, 1000)\r\n            } else {\r\n                this.elevatorMove = false\r\n                let removed = this.currentList.removeNext()\r\n                if(this.currentList === this.upList) {\r\n                    if(removed && this.currentList.getIndexNode() && removed.value > this.currentList.getIndexNode().value) {\r\n                        this.currentList = this.downList\r\n                    }\r\n                } else {\r\n                    if(removed && this.currentList.getIndexNode() && removed.value < this.currentList.getIndexNode().value) {\r\n                        this.currentList = this.upList\r\n                    }\r\n                }\r\n                this.manageCall(call)\r\n            }\r\n        }\r\n\r\n        window.requestAnimationFrame(doorAction)\r\n    }\r\n}",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":11,"column":29,"nodeType":"73","messageId":"74","endLine":11,"endColumn":47},{"ruleId":"71","severity":1,"message":"75","line":12,"column":12,"nodeType":"73","messageId":"74","endLine":12,"endColumn":28},{"ruleId":"71","severity":1,"message":"76","line":12,"column":30,"nodeType":"73","messageId":"74","endLine":12,"endColumn":49},{"ruleId":"77","severity":1,"message":"78","line":25,"column":8,"nodeType":"79","endLine":25,"endColumn":16,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"81","line":32,"column":8,"nodeType":"79","endLine":32,"endColumn":28,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":19,"column":17,"nodeType":"85","endLine":19,"endColumn":35},{"ruleId":"83","severity":1,"message":"84","line":20,"column":17,"nodeType":"85","endLine":20,"endColumn":37},{"ruleId":"86","severity":1,"message":"87","line":3,"column":1,"nodeType":"88","endLine":10,"endColumn":2},{"ruleId":"71","severity":1,"message":"89","line":68,"column":19,"nodeType":"73","messageId":"74","endLine":68,"endColumn":20},{"ruleId":"71","severity":1,"message":"89","line":75,"column":19,"nodeType":"73","messageId":"74","endLine":75,"endColumn":20},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'setFloorDimensions' is assigned a value but never used.","Identifier","unusedVar","'elevatorLocation' is assigned a value but never used.","'setElevatorLocation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'floorDimensions' and 'floors'. Either include them or remove the dependency array.","ArrayExpression",["92"],"React Hook useEffect has a missing dependency: 'building'. Either include it or remove the dependency array.",["93"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'y' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [canvas, floorDimensions, floors]",{"range":"98","text":"99"},"Update the dependencies array to be: [building, props.elevatorCall]",{"range":"100","text":"101"},[946,954],"[canvas, floorDimensions, floors]",[1079,1099],"[building, props.elevatorCall]"]